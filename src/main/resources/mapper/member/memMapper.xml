<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.hts.market.domain.member.repo.MemRepo">
    <select id="countByMemUsername" resultType="boolean">
        <![CDATA[
            SELECT
                count(*)
            FROM
                MEMBER
            WHERE
                mem_username=#{memUsername} and rownum <= 1
        ]]>
    </select>
    <select id="countByMemNo" resultType="boolean">
        <![CDATA[
            SELECT
                count(*)
            FROM
                MEMBER
            WHERE
                mem_no=#{memNo} and rownum <= 1
        ]]>
    </select>
    <insert id="save">
        <selectKey resultType="long" order="BEFORE" keyProperty="memNo">
            <if test="memNo==null">
                select mem_seq.nextval from dual
            </if>
            <if test="memNo!=null">
                SELECT #{memNo} FROM DUAL
            </if>
        </selectKey>
        INSERT INTO
            MEMBER( mem_no, mem_username, mem_password, mem_email, mem_nickname )
        VALUES
            ( #{memNo}, #{memUsername}, #{memPassword}, #{memEmail}, #{memNickname} )
    </insert>
    <update id="updateMemPassword">
        <![CDATA[
            UPDATE
                MEMBER
            SET
                mem_password=#{memPassword}
            WHERE
                mem_username=#{memUsername} AND rownum <= 1
        ]]>
    </update>
    <update id="updateMemUsernameById">
        <![CDATA[
            UPDATE
                MEMBER
            SET
                mem_username=#{memUsername}
            WHERE
                mem_no=#{memNo} AND rownum <= 1
        ]]>
    </update>
    <update id="updateByMemUsername">
        <![CDATA[
            UPDATE
                MEMBER
            SET
                mem_nickname=#{memNickname}, mem_email=#{memEmail}
            WHERE
                mem_username=#{memUsername} AND rownum <= 1
        ]]>
    </update>
    <select id="loadUserByUsername" resultType="com.hts.market.domain.member.entity.MemEntity">
        <![CDATA[
            SELECT
                *
            FROM
                MEMBER
            WHERE
                mem_username=#{memUsername} and rownum <= 1
        ]]>
    </select>
    <select id="loadUserByMemNo" resultType="com.hts.market.domain.member.entity.MemEntity">
        <![CDATA[
            SELECT
                *
            FROM
                MEMBER
            WHERE
                mem_no=#{memNo} and rownum <= 1
        ]]>
    </select>
    <select id="findById" resultMap="memDtoMember">
        SELECT
            m.mem_no, m.mem_username, m.mem_nickname, m.mem_email, m.mem_brix, m.mem_created_at,
            i.img_no, i.img_path,
            a.address_no, a.address_si, a.address_gu, a.address_dong
        FROM
            MEMBER m
                left outer join MEMBER_IMAGE i on m.mem_no = i.mem_no
                left outer join ADDRESS a on m.mem_no = a.mem_no
        WHERE
            m.mem_no=#{memNo}
    </select>
    <select id="findByName" resultMap="memDtoMember">
        SELECT
            m.mem_no, m.mem_username, m.mem_nickname, m.mem_email, m.mem_brix, m.mem_created_at,
            i.img_no, i.img_path,
            a.address_no, a.address_si, a.address_gu, a.address_dong
        FROM
            MEMBER m
                left outer join MEMBER_IMAGE i on m.mem_no = i.mem_no
                left outer join ADDRESS a on m.mem_no = a.mem_no
        WHERE
            m.mem_username=#{memUsername}
    </select>
    <resultMap id="memDtoMember" type="com.hts.market.domain.member.dto.MemDto$Member">
        <id column="mem_no"                 property="memNo"/>
        <result column="mem_username"       property="memUsername"/>
        <result column="mem_nickname"       property="memNickname"/>
        <result column="mem_email"          property="memEmail"/>
        <result column="mem_brix"           property="memBrix"/>
        <result column="mem_created_at"     property="memCreatedAt"/>
        <result column="img_no"             property="imgNo"/>
        <result column="img_path"           property="imgPath"/>
        <collection property="address" ofType="com.hts.market.domain.member.dto.AddressDto$Read">
            <id column="address_no"         property="addressNo"/>
            <result column="address_si"     property="addressSi"/>
            <result column="address_gu"     property="addressGu"/>
            <result column="address_dong"   property="addressDong"/>
        </collection>
    </resultMap>
    <select id="findIdByMemUsername" resultType="long">
        <![CDATA[
            SELECT
                mem_no
            FROM
                MEMBER
            WHERE
                mem_username=#{memUsername} and rownum >= 1
        ]]>
    </select>
    <update id="updateProfile">
        <![CDATA[
            UPDATE
                MEMBER m left join MEMBER_IMAGE i on m.mem_no=i.mem_no
            SET
                m.mem_nickname=#{memNickname}
            SET
                i.img_path=#{imgPath}
            WHERE
                m.mem_no=#{memNo} AND rownum <= 1
        ]]>
    </update>


<!--    &lt;!&ndash;    // 새로 추가된 메소드&ndash;&gt;-->
<!--    &lt;!&ndash; 임시 회원 가입 &ndash;&gt;-->
<!--    <insert id="saveTemp">-->
<!--        <selectKey resultType="long" order="BEFORE" keyProperty="memNo">-->
<!--            select nvl(max(mem_no),0)+1 from MEMBER-->
<!--        </selectKey>-->
<!--        insert into-->
<!--        MEMBER( mem_no )-->
<!--        values-->
<!--        ( #{memNo} )-->
<!--    </insert>-->
<!--    &lt;!&ndash; 회원 조회(memUsername)(userDetails) &ndash;&gt;-->
<!--    <select id="loadUserByUsername" resultType="com.hts.market.domain.member.entity.MemEntity">-->
<!--        <![CDATA[-->
<!--            SELECT-->
<!--                *-->
<!--            FROM-->
<!--                MEMBER-->
<!--            WHERE-->
<!--                mem_username=#{memUsername} and rownum <= 1-->
<!--        ]]>-->
<!--    </select>-->

<!--    &lt;!&ndash;    // 이하 설계도에 있는 메소드&ndash;&gt;-->
<!--    &lt;!&ndash; 회원 가입 &ndash;&gt;-->
<!--    <insert id="save">-->
<!--        <selectKey resultType="long" order="BEFORE" keyProperty="memNo">-->
<!--            select nvl(max(mem_no),0)+1 from MEMBER-->
<!--        </selectKey>-->
<!--        insert into-->
<!--        MEMBER( mem_no, mem_username, mem_password, mem_name, mem_nickname, mem_email, mem_phone )-->
<!--        values-->
<!--        ( #{memNo}, #{memUsername}, #{memPassword}, #{memName}, #{memNickname}, #{memEmail}, #{memPhone} )-->
<!--    </insert>-->
<!--    &lt;!&ndash; 회원 조회(memNo) &ndash;&gt;-->
<!--    <select id="findById" resultType="com.hts.market.domain.member.dto.MemDto$Read">-->
<!--        <![CDATA[-->
<!--            SELECT-->
<!--                mem_no, mem_username, mem_password, mem_name, mem_nickname, mem_email, mem_phone, mem_brix, mem_created_at-->
<!--            FROM-->
<!--                MEMBER-->
<!--            WHERE-->
<!--                mem_no=#{memNo} and rownum <= 1-->
<!--        ]]>-->
<!--    </select>-->
<!--    &lt;!&ndash; 회원 조회(memUsername)&ndash;&gt;-->
<!--    <select id="findByMemUsername" resultType="com.hts.market.domain.member.dto.MemDto$Read">-->
<!--        <![CDATA[-->
<!--            SELECT-->
<!--                mem_no, mem_username, mem_password, mem_name, mem_nickname, mem_email, mem_phone, mem_brix, mem_created_at-->
<!--            FROM-->
<!--                MEMBER-->
<!--            WHERE-->
<!--                mem_username=#{memUsername} and rownum <= 1-->
<!--        ]]>-->
<!--    </select>-->
<!--    &lt;!&ndash; 회원 수정&ndash;&gt;-->
<!--    <update id="update">-->
<!--        <![CDATA[-->
<!--            UPDATE-->
<!--                MEMBER-->
<!--            SET-->
<!--                mem_nickname=#{memNickname}, mem_email=#{memEmail}-->
<!--            WHERE-->
<!--                mem_no=#{memNo} and rownum <= 1-->
<!--        ]]>-->
<!--    </update>-->
<!--    &lt;!&ndash; 회원 삭제&ndash;&gt;-->
<!--    <delete id="delete">-->
<!--        delete from MEMBER where mem_no=#{memNo}-->
<!--    </delete>-->
<!--    &lt;!&ndash; 회원명 중복검사 &ndash;&gt;-->
<!--    <select id="countByMemUsername" resultType="boolean">-->
<!--        <![CDATA[-->
<!--            SELECT-->
<!--                count(*)-->
<!--            FROM-->
<!--                MEMBER-->
<!--            WHERE-->
<!--                mem_username=#{memUsername} and rownum <= 1-->
<!--        ]]>-->
<!--    </select>-->
<!--    &lt;!&ndash; 이메일 중복검사 &ndash;&gt;-->
<!--    <select id="countByMemEmail" resultType="int">-->
<!--        <![CDATA[-->
<!--            SELECT-->
<!--                count(*)-->
<!--            FROM-->
<!--                MEMBER-->
<!--            WHERE-->
<!--                mem_email=#{memEmail} and rownum <= 1-->
<!--        ]]>-->
<!--    </select>-->
<!--    &lt;!&ndash; 닉네임 중복검사 &ndash;&gt;-->
<!--    <select id="countByMemNickname" resultType="int">-->
<!--        <![CDATA[-->
<!--            SELECT-->
<!--                count(*)-->
<!--            FROM-->
<!--                MEMBER-->
<!--            WHERE-->
<!--                mem_nickname=#{memNickname} and rownum <= 1-->
<!--        ]]>-->
<!--    </select>-->
<!--    &lt;!&ndash; 전화번호 중복검사 &ndash;&gt;-->
<!--    <select id="countByMemPhone" resultType="int">-->
<!--        <![CDATA[-->
<!--            SELECT-->
<!--                count(*)-->
<!--            FROM-->
<!--                MEMBER-->
<!--            WHERE-->
<!--                mem_phone=#{memPhone} and rownum <= 1-->
<!--        ]]>-->
<!--    </select>-->

<!--    &lt;!&ndash; 당도 검색&ndash;&gt;-->
<!--    <select id="findMemBrixByMemNo" resultType="int">-->
<!--        <![CDATA[-->
<!--            SELECT-->
<!--                mem_brix-->
<!--            FROM-->
<!--                MEMBER-->
<!--            WHERE-->
<!--                mem_no=#{memNo} and rownum <= 1-->
<!--        ]]>-->
<!--    </select>-->
<!--    &lt;!&ndash; 인증된 전화번호 추가 &ndash;&gt;-->
<!--    <update id="updateMemPhoneById">-->
<!--        <![CDATA[-->
<!--            UPDATE-->
<!--                MEMBER-->
<!--            SET-->
<!--                mem_phone=#{memPhone}-->
<!--            WHERE-->
<!--                mem_no=#{memNo} and rownum <= 1-->
<!--        ]]>-->
<!--    </update>-->
</mapper>




<!--&lt;!&ndash;    유저명 검증&ndash;&gt;-->
<!--    <select id="countByUsername" resultType="boolean">-->
<!--        <![CDATA[-->
<!--            select count(*) from MEMBERS where username=#{username} and rownum <= 1-->
<!--        ]]>-->
<!--    </select>-->
<!--&lt;!&ndash;    이메일 검증&ndash;&gt;-->
<!--    <select id="countByEmail" resultType="boolean">-->
<!--        <![CDATA[-->
<!--            select count(*) from MEMBERS where email=#{email} and rownum <= 1-->
<!--        ]]>-->
<!--    </select>-->
        <!--    <insert id="save">-->
        <!--        <selectKey resultType="long" order="BEFORE" keyProperty="memberId">-->
        <!--            select nvl(max(member_id),0)+1 from members-->
        <!--        </selectKey>-->
        <!--        insert into members-->
        <!--            ( member_id, username, password, name, age, sex, email, phone )-->
        <!--        values-->
        <!--            ( #{memberId}, #{username}, #{password}, #{name}, #{age}, #{sex}, #{email}, #{phone} )-->
        <!--    </insert>-->
        <!--    <select id="findByUsername" resultType="com.icia.board.domain.members.entity.MembersEntity">-->
        <!--        <![CDATA[-->
        <!--            select * from members where username=#{username} and rownum <= 1-->
        <!--        ]]>-->
        <!--    </select>-->
        <!--    <select id="findByEmail" resultType="com.icia.board.domain.members.entity.MembersEntity">-->
        <!--        <![CDATA[-->
        <!--            select * from members where email=#{email} and rownum <= 1-->
        <!--        ]]>-->
        <!--    </select>-->

<!--    <select id="existsById" resultType="int">-->
<!--        <![CDATA[-->
<!--            select count(*) from members where username=#{username} and rownum <= 1-->
<!--        ]]>-->
<!--    </select>-->
<!--    // 게시글 저장-->
<!--    Integer save(Articles.Write article);-->
<!--    // 게시글 목록조회-->
<!--    List<Articles.ReadList> findAllByPageno(Integer pageno, Integer count);-->
<!--    // 게시글 조회-->
<!--    Optional<Articles.Read> findById(Long id);-->
<!--    // 게시글 수정-->
<!--    Integer updateById(Articles.Update article);-->
<!--    // 게시글 삭제-->
<!--    Integer deleteById(Articles.Delete article);-->

<!--	join 해서 가져온 테이블에 중복값은 제외하는 방법 -> resultMap-->
<!--	<resultMap id="boardMap" type="com.example.demo.dto.BoardDto$Read(이 안에는 글 양식 + comment List 가 있다.)" >-->
<!--		<id property="bno" column="bno"/>-->
<!--		<result property="title" column="title"/>-->
<!--		<result property="content" column="content"/>-->
<!--		<result property="writer" column="writer"/>-->
<!--		<result property="writeTime" column="write_time"/>-->
<!--		<collection property="comments" ofType="com.example.demo.dto.CommentDto$Read">-->
<!--			<id property="cno" column="cno"/>-->
<!--			<result property="content" column="c_content"/>-->
<!--			<result property="writer" column="c_writer"/>-->
<!--			<result property="writeTime" column="c_write_time"/>-->
<!--		</collection>-->
<!--	</resultMap>-->

<!--	<select id="findById2" resultMap="boardMap">-->
<!--		SELECT-->
<!--			b.*, c.no, c.content as c_content, c.writer as c_writer, c.writeTime as c_write_time-->
<!--		FROM-->
<!--			board b left outer join comments c on b.bno=c.cno-->
<!--		WHERE-->
<!--			b.bno=#{bno}-->
<!--	</select>-->



<!--	<insert id="save">-->
<!--		<selectKey keyProperty="prdNo"  resultType="int"  order="BEFORE" >-->
<!--			select (nvl(max(prdNo), 0)+1) from product-->
<!--		</selectKey>-->
<!--		insert into product p-->
<!--			( prdNo, company, prdName, rdDesc, writer, price ) -->
<!--		values-->
<!--			( #{prdNo}, #{company}, #{prdName}, #{prdDesc}, #{writer}, #{price} )-->
<!--	</insert>-->
<!--	-->
<!--	<select id="findList" resultType="com.icia.zBoard.dto.response.ProductListRes">-->
<!--		<![CDATA[-->
<!--			select prdNo, prdName, price, registeredAt, salesCnt, reviewsCnt from-->
<!--			(-->
<!--				select rownum as rnum, p.* from-->
<!--				( -->
<!--					select prdNo, prdName, price, registeredAt, salesCnt, reviewsCnt from product order by prdNo desc-->
<!--				) p-->
<!--				where rownum <= #{count}-->
<!--			)-->
<!--			where rnum >= #{start}-->
<!--		]]>-->
<!--	</select>-->
<!--	-->
<!--	<select id="findById" resultType="com.icia.zBoard.dto.response.ProductRes">-->
<!--		select * from product where prdNo = #{prdNo}-->
<!--	</select>-->
<!--	-->
<!--	<update id="updateById">-->
<!--		update product -->
<!--			<trim prefix="set" suffixOverrides=",">-->
<!--			   	<if test="company != null">company=#{company},</if>-->
<!--			  	<if test="prdName != null">prdName=#{prdName},</if>-->
<!--			  	<if test="prdDesc != null">prdDesc=#{prdDesc},</if>-->
<!--			  	<if test="price != null">price=#{price},</if>-->
<!--			  	<if test="salesCnt != null">salesCnt=salesCnt+1,</if>-->
<!--			  	<if test="reviewsCnt != null">reviewsCnt=reviewsCnt+1,</if>-->
<!--		  	</trim>-->
<!--		where prdNo = #{prdNo} <if test="writer != null">and writer = #{writer}</if>-->
<!--	</update>-->
<!--	-->
<!--	<delete id="deleteById">-->
<!--		delete from product where prdNo = #{prdNo} and writer = #{writer}-->
<!--	</delete>-->
<!--	-->
<!--	<select id="isPresent">-->
<!--		select prdNo from product where prdNo = #{prdNo}-->
<!--	</select>-->